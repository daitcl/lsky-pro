name: Build and Push

# 只允许手动触发
on:
  workflow_dispatch:
    inputs:
      build_version:
        description: '是否构建特定版本 (true/false)'
        required: false
        default: 'true'
        type: boolean
      custom_tag:
        description: '自定义版本标签 (例如: v2.1.1)'
        required: false
        default: 'v2.1'
        type: string

env:
  TZ: Asia/Shanghai
  IMAGE_NAME: lsky-pro
  REGISTRY: ghcr.io
  DOCKERHUB_IMAGE_NAME: daitcl/lsky-pro

jobs:
  # 第一个 Job：准备环境和设置
  prepare:
    runs-on: ubuntu-latest
    outputs:
      image_full_name: ${{ steps.setup.outputs.image_full_name }}
      version_tag: ${{ steps.setup.outputs.version_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Build Info
        id: setup
        run: |
          # 设置镜像完整名称
          IMAGE_FULL_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
          echo "image_full_name=$IMAGE_FULL_NAME" >> $GITHUB_OUTPUT

          # 设置版本标签
          if [ "${{ github.event.inputs.build_version }}" = "true" ]; then
            VERSION_TAG="${{ github.event.inputs.custom_tag || 'v2.1' }}"
          else
            VERSION_TAG=""
          fi
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "Version tag: $VERSION_TAG"

  # 第二个 Job：构建并推送 linux/amd64 平台镜像
  build-amd64:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push linux/amd64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ needs.prepare.outputs.image_full_name }}:latest-amd64
            ${{ env.DOCKERHUB_IMAGE_NAME }}:latest-amd64
            ${{ needs.prepare.outputs.image_full_name }}:${{ needs.prepare.outputs.version_tag }}-amd64
            ${{ env.DOCKERHUB_IMAGE_NAME }}:${{ needs.prepare.outputs.version_tag }}-amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ needs.prepare.outputs.version_tag || 'latest' }}

  # 第三个 Job：构建并推送 linux/arm64 平台镜像
  build-arm64:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push linux/arm64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ${{ needs.prepare.outputs.image_full_name }}:latest-arm64
            ${{ env.DOCKERHUB_IMAGE_NAME }}:latest-arm64
            ${{ needs.prepare.outputs.image_full_name }}:${{ needs.prepare.outputs.version_tag }}-arm64
            ${{ env.DOCKERHUB_IMAGE_NAME }}:${{ needs.prepare.outputs.version_tag }}-arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ needs.prepare.outputs.version_tag || 'latest' }}

  # 第四个 Job：创建多平台 Manifest 并推送
  manifest:
    needs: [prepare, build-amd64, build-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push manifest for GHCR
        run: |
          # 创建并推送 latest 标签的 manifest
          docker buildx imagetools create \
            -t ${{ needs.prepare.outputs.image_full_name }}:latest \
            ${{ needs.prepare.outputs.image_full_name }}:latest-amd64 \
            ${{ needs.prepare.outputs.image_full_name }}:latest-arm64
          
          # 如果指定了版本标签，则创建并推送版本标签的 manifest
          if [ -n "${{ needs.prepare.outputs.version_tag }}" ]; then
            docker buildx imagetools create \
              -t ${{ needs.prepare.outputs.image_full_name }}:${{ needs.prepare.outputs.version_tag }} \
              ${{ needs.prepare.outputs.image_full_name }}:${{ needs.prepare.outputs.version_tag }}-amd64 \
              ${{ needs.prepare.outputs.image_full_name }}:${{ needs.prepare.outputs.version_tag }}-arm64
          fi

      - name: Create and push manifest for DockerHub
        run: |
          # 创建并推送 latest 标签的 manifest
          docker buildx imagetools create \
            -t ${{ env.DOCKERHUB_IMAGE_NAME }}:latest \
            ${{ env.DOCKERHUB_IMAGE_NAME }}:latest-amd64 \
            ${{ env.DOCKERHUB_IMAGE_NAME }}:latest-arm64
          
          # 如果指定了版本标签，则创建并推送版本标签的 manifest
          if [ -n "${{ needs.prepare.outputs.version_tag }}" ]; then
            docker buildx imagetools create \
              -t ${{ env.DOCKERHUB_IMAGE_NAME }}:${{ needs.prepare.outputs.version_tag }} \
              ${{ env.DOCKERHUB_IMAGE_NAME }}:${{ needs.prepare.outputs.version_tag }}-amd64 \
              ${{ env.DOCKERHUB_IMAGE_NAME }}:${{ needs.prepare.outputs.version_tag }}-arm64
          fi

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD || secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.DOCKERHUB_IMAGE_NAME }}
          readme-filepath: ./README.md
          short-description: "☁️兰空图床(Lsky Pro) - Docker自动构建，支持多平台，提供最新版和指定版本镜像"

      - name: Show build information
        run: |
          echo "=== Build Summary ==="
          echo "Multi-arch image pushed with tags:"
          echo "- ${{ needs.prepare.outputs.image_full_name }}:latest"
          echo "- ${{ env.DOCKERHUB_IMAGE_NAME }}:latest"
          if [ -n "${{ needs.prepare.outputs.version_tag }}" ]; then
            echo "- ${{ needs.prepare.outputs.image_full_name }}:${{ needs.prepare.outputs.version_tag }}"
            echo "- ${{ env.DOCKERHUB_IMAGE_NAME }}:${{ needs.prepare.outputs.version_tag }}"
          fi
          echo ""
          echo "GitHub Container Registry:"
          echo "https://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
          echo ""
          echo "Docker Hub:"
          echo "https://hub.docker.com/r/${{ env.DOCKERHUB_IMAGE_NAME }}"